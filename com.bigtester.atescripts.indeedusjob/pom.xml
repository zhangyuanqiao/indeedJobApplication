<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.bigtester</groupId>
  <artifactId>com.bigtester.atescripts.indeedusjob</artifactId>
  <version>1.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>com.bigtester.atescripts.indeedusjob</name>


  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
  </properties>
 <repositories>
    <repository>
        <id>repo-id</id>
        <name>repo-name</name>
        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
    </repository>
</repositories>

	<dependencies>
		<dependency>
			<groupId>org.bigtester</groupId>
			<artifactId>org.bigtester.ate.core</artifactId>
			<version>0.1.6-SNAPSHOT</version>
		</dependency>

	</dependencies>
	<build>
		<plugins>
		
		<!-- 			to update the browser driver run
mvn com.lazerycode.selenium:driver-binary-downloader-maven-plugin:selenium -->
			
			<plugin>
				<groupId>com.lazerycode.selenium</groupId>
				<artifactId>driver-binary-downloader-maven-plugin</artifactId>
				<version>1.0.14</version>
				<configuration>
					<!-- root directory that downloaded driver binaries will be stored in -->
					<rootStandaloneServerDirectory>browserdriver</rootStandaloneServerDirectory>
					<!-- Where you want to store downloaded zip files -->
					<downloadedZipFileDirectory>/tmp/zips</downloadedZipFileDirectory>
					<!-- Location of a custom repository map -->
					<customRepositoryMap>browserdriver/repo.xml</customRepositoryMap>
					<!-- This will ensure that the plugin only downloads binaries for the 
						current OS, this will override anything specified in the <operatingSystems> 
						configuration -->
					<onlyGetDriversForHostOperatingSystem>true</onlyGetDriversForHostOperatingSystem>
					<!-- Operating systems you want to download binaries for (Only valid 
						options are: windows, linux, osx) -->
					<operatingSystems>
						<windows>true</windows>
						<linux>true</linux>
						<mac>true</mac>
					</operatingSystems>
					<!-- Download 32bit binaries -->
					<thirtyTwoBitBinaries>true</thirtyTwoBitBinaries>
					<!-- Download 64bit binaries -->
					<sixtyFourBitBinaries>true</sixtyFourBitBinaries>
					<!-- If set to false will download every version available (Other filters 
						will be taken into account -->
					<onlyGetLatestVersions>true</onlyGetLatestVersions>
					<!-- Provide a list of drivers and binary versions to download (this 
						is a map so only one version can be specified per driver) -->
					<!-- <getSpecificExecutableVersions> -->
					<!-- <googlechrome>18</googlechrome> -->
					<!-- </getSpecificExecutableVersions> -->
					<!-- Throw an exception if any specified binary versions that the plugin 
						tries to download do not exist -->
					<throwExceptionIfSpecifiedVersionIsNotFound>false</throwExceptionIfSpecifiedVersionIsNotFound>
					<!-- Number of times to attempt to download each file -->
					<fileDownloadRetryAttempts>2</fileDownloadRetryAttempts>
					<!-- Number of ms to wait before timing out when trying to connect to 
						remote server to download file -->
					<fileDownloadConnectTimeout>20000</fileDownloadConnectTimeout>
					<!-- Number of ms to wait before timing out when trying to read file 
						from remote server -->
					<fileDownloadReadTimeout>10000</fileDownloadReadTimeout>
					<!-- Overwrite any existing binaries that have been downloaded and extracted -->
					<overwriteFilesThatExist>true</overwriteFilesThatExist>
					<!-- Check file hashes of downloaded files. Default: true -->
					<checkFileHashes>true</checkFileHashes>
					<!-- auto detect system proxy to use when downloading files -->
					<!-- To specify an explicit proxy set the environment variables http.proxyHost 
						and http.proxyPort -->
					<useSystemProxy>true</useSystemProxy>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>selenium</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		
<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1.1</version>
				<executions>
					<execution>
						<phase>test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
	<configuration>
          <executable>java</executable>
          <arguments>
          <argument>-Dlogback.configurationFile=indeedJobApplication/logback-production.xml</argument>
<!--           <argument>-Xdebug</argument> -->
<!--           <argument>-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8007</argument> -->
          
            <argument>-classpath</argument>
            <!-- automatically creates the classpath using all project dependencies,
                 also adding the project build directory -->
            <classpath/>
            <argument>-Xms256m</argument>
            
            <argument> -Xmx4096m</argument>
            <argument> -XX:MaxPermSize=2048m</argument>
           
            <argument> org.bigtester.ate.TestProjectRunner</argument>
            <argument>indeedJobApplication/testproject.xml</argument>
          </arguments>
        </configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.lazerycode.selenium
										</groupId>
										<artifactId>
											driver-binary-downloader-maven-plugin
										</artifactId>
										<versionRange>
											[1.0.14,)
										</versionRange>
										<goals>
											<goal>selenium</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
